apiVersion: apps/v1
kind: Deployment
metadata:
  name: fake-log-generator
  namespace: default
  labels:
    app: fake-log-generator
    testing.environment: github-actions
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fake-log-generator
  template:
    metadata:
      labels:
        app: fake-log-generator
        testing.environment: github-actions
    spec:
      initContainers:
      - name: copy-script
        image: python:3.13-slim
        command:
        - sh
        - -c
        - |
          cat > /app/fake_log_generator.py << 'EOF'
          #!/usr/bin/env python3
          import json
          import time
          import random
          from datetime import datetime, timezone
          
          # Simple log generator for testing
          def generate_plain_text_log():
              levels = ["INFO", "DEBUG", "WARN", "ERROR"]
              modules = ["auth.service", "database.connection", "api.handler"]
              
              level = random.choice(levels)
              module = random.choice(modules)
              message = f"Test log message {random.randint(1000, 9999)}"
              timestamp = datetime.now(timezone.utc).isoformat()
              
              return f"{timestamp} {level} {module}: {message}"
          
          def generate_json_log():
              levels = ["INFO", "DEBUG", "WARN", "ERROR"]
              modules = ["auth.service", "database.connection", "api.handler"]
              
              return json.dumps({
                  "timestamp": datetime.now(timezone.utc).isoformat(),
                  "level": random.choice(levels),
                  "module": random.choice(modules),
                  "message": f"JSON test log {random.randint(1000, 9999)}",
                  "request_id": f"req-{random.randint(10000, 99999)}",
                  "user_id": f"user-{random.randint(100, 999)}"
              })
          
          # Generate logs indefinitely with mixed formats
          while True:
              batch_size = random.randint(50, 100)
              for _ in range(batch_size):
                  # 60% plain text, 40% JSON to test both formats
                  if random.random() < 0.6:
                      print(generate_plain_text_log())
                  else:
                      print(generate_json_log())
              time.sleep(random.uniform(0.5, 1.5))
          EOF
          chmod +x /app/fake_log_generator.py
        volumeMounts:
        - name: script-volume
          mountPath: /app
      containers:
      - name: fake-log-generator
        image: python:3.13-slim
        command:
        - python3
        - /app/fake_log_generator.py
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: script-volume
          mountPath: /app
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: script-volume
        emptyDir: {}