AWSTemplateFormatVersion: '2010-09-09'
Description: 'SQS infrastructure for multi-tenant log distribution pipeline'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming
    
  LogDeliveryTopicArn:
    Type: String
    Description: ARN of the log delivery SNS topic to subscribe to

Resources:
  # SQS queue for log delivery processing
  LogDeliveryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${Environment}-log-delivery-queue'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeout: 900    # 15 minutes
      ReceiveMessageWaitTimeSeconds: 20 # Long polling
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt LogDeliveryDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: StackType
          Value: sqs-infrastructure

  # Dead Letter Queue for failed messages
  LogDeliveryDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${Environment}-log-delivery-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: StackType
          Value: sqs-infrastructure

  # SQS queue policy to allow SNS to send messages
  LogDeliveryQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref LogDeliveryQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSNSMessages
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt LogDeliveryQueue.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref LogDeliveryTopicArn

  # SNS subscription: SNS topic to SQS queue
  LogDeliveryQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LogDeliveryTopicArn
      Protocol: sqs
      Endpoint: !GetAtt LogDeliveryQueue.Arn
      # No filter policy - S3 notifications don't use message attributes

Outputs:
  LogDeliveryQueueArn:
    Description: ARN of the log delivery SQS queue
    Value: !GetAtt LogDeliveryQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryQueueArn'

  LogDeliveryQueueName:
    Description: Name of the log delivery SQS queue
    Value: !GetAtt LogDeliveryQueue.QueueName
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryQueueName'

  LogDeliveryQueueUrl:
    Description: URL of the log delivery SQS queue
    Value: !Ref LogDeliveryQueue
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryQueueUrl'

  LogDeliveryDLQArn:
    Description: ARN of the log delivery DLQ
    Value: !GetAtt LogDeliveryDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryDLQArn'

  LogDeliveryDLQName:
    Description: Name of the log delivery DLQ
    Value: !GetAtt LogDeliveryDLQ.QueueName
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryDLQName'