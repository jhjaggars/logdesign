AWSTemplateFormatVersion: '2010-09-09'
Description: 'API Gateway and Lambda functions for tenant management API'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming
    
  APIAuthSSMParameter:
    Type: String
    Description: SSM parameter name containing the PSK for API authentication
    
  TenantConfigTableName:
    Type: String
    Description: Name of the tenant configuration DynamoDB table
    
  TenantConfigTableArn:
    Type: String
    Description: ARN of the tenant configuration DynamoDB table
    
  AuthorizerImageUri:
    Type: String
    Description: ECR URI for the Lambda authorizer container image
    
  APIImageUri:
    Type: String
    Description: ECR URI for the API service container image

Resources:
  # Lambda Authorizer Function
  AuthorizerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-api-authorizer'
      Code:
        ImageUri: !Ref AuthorizerImageUri
      PackageType: Image
      Role: !GetAtt AuthorizerExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          PSK_PARAMETER_NAME: !Ref APIAuthSSMParameter
          LOG_LEVEL: INFO
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: api-authorizer

  # Lambda Authorizer Execution Role
  AuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-api-authorizer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${APIAuthSSMParameter}'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Main API Lambda Function
  APIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-api-service'
      Code:
        ImageUri: !Ref APIImageUri
      PackageType: Image
      Role: !GetAtt APIExecutionRole.Arn
      Timeout: 30
      MemorySize: 512
      Environment:
        Variables:
          TENANT_CONFIG_TABLE: !Ref TenantConfigTableName
          LOG_LEVEL: INFO
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: Component
          Value: api-service

  # API Lambda Execution Role
  APIExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-api-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !Ref TenantConfigTableArn
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway REST API
  TenantManagementAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-tenant-api'
      Description: REST API for tenant configuration management
      EndpointConfiguration:
        Types:
          - REGIONAL
      Policy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: execute-api:Invoke
            Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # API Gateway Authorizer
  APIAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-hmac-authorizer'
      RestApiId: !Ref TenantManagementAPI
      Type: REQUEST
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerFunction.Arn}/invocations'
      AuthorizerCredentials: !GetAtt APIGatewayAuthorizerRole.Arn
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: 'method.request.header.Authorization,method.request.header.X-API-Timestamp'

  # API Gateway role for invoking authorizer
  APIGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: InvokeAuthorizerFunction
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn

  # Permission for API Gateway to invoke authorizer
  AuthorizerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AuthorizerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantManagementAPI}/authorizers/${APIAuthorizer}'

  # Permission for API Gateway to invoke main API function
  APIInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt APIFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TenantManagementAPI}/*/*'

  # API Gateway Resource for /api
  APIResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ParentId: !GetAtt TenantManagementAPI.RootResourceId
      PathPart: api

  # API Gateway Resource for /api/v1
  APIVersionResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ParentId: !Ref APIResource
      PathPart: v1

  # Proxy resource to catch all paths under /api/v1
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ParentId: !Ref APIVersionResource
      PathPart: '{proxy+}'

  # Health check method (no authorization)
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ResourceId: !Ref APIVersionResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # Proxy method for all other endpoints (with authorization)
  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref APIAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${APIFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true

  # CORS Options method for health endpoint
  HealthOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ResourceId: !Ref APIVersionResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-API-Timestamp'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # CORS Options method for proxy endpoints
  ProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TenantManagementAPI
      ResourceId: !Ref ProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-API-Timestamp'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - HealthMethod
      - ProxyMethod
      - HealthOptionsMethod
      - ProxyOptionsMethod
    Properties:
      RestApiId: !Ref TenantManagementAPI
      StageName: !Ref Environment
      Description: !Sub '${Environment} stage for tenant management API'

  # CloudWatch Log Group for API Gateway
  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${ProjectName}-${Environment}-tenant-api'
      RetentionInDays: 14

Outputs:
  APIEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${TenantManagementAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'
  
  APIId:
    Description: API Gateway REST API ID
    Value: !Ref TenantManagementAPI
    Export:
      Name: !Sub '${AWS::StackName}-APIId'
      
  AuthorizerFunctionArn:
    Description: ARN of the Lambda authorizer function
    Value: !GetAtt AuthorizerFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-AuthorizerFunctionArn'
      
  APIFunctionArn:
    Description: ARN of the API service Lambda function
    Value: !GetAtt APIFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-APIFunctionArn'