AWSTemplateFormatVersion: '2010-09-09'
Description: 'Container-based Lambda functions for multi-tenant log distribution'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming
    
  TenantConfigTableName:
    Type: String
    Description: Name of the tenant configuration DynamoDB table
    
  SQSQueueArn:
    Type: String
    Description: ARN of the SQS queue to process messages from
    
  SQSQueueUrl:
    Type: String
    Description: URL of the SQS queue
    
  ECRImageUri:
    Type: String
    Description: URI of the ECR container image for the log processor
    
  CentralLogDistributionRoleArn:
    Type: String
    Description: ARN of the central log distribution role for cross-account access
    
  TenantConfigTableArn:
    Type: String
    Description: ARN of the tenant configuration DynamoDB table
    
  CentralLoggingBucketArn:
    Type: String
    Description: ARN of the central logging S3 bucket

Resources:
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: LogProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # DynamoDB access for tenant configurations
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                Resource: !Ref TenantConfigTableArn
              # S3 access for reading log files
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetBucketLocation
                  - s3:ListBucket
                Resource:
                  - !Ref CentralLoggingBucketArn
                  - !Sub '${CentralLoggingBucketArn}/*'
              # Assume the central log distribution role
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !Ref CentralLogDistributionRoleArn
              # KMS access for encrypted S3 buckets
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # CloudWatch Log Group for Lambda functions
  LogDistributorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-log-distributor'
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: StackType
          Value: lambda-functions

  # Container-based Lambda function for log distribution
  LogDistributorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-log-distributor'
      PackageType: Image
      Code:
        ImageUri: !Ref ECRImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          TENANT_CONFIG_TABLE: !Ref TenantConfigTableName
          MAX_BATCH_SIZE: "1000"
          RETRY_ATTEMPTS: "3"
          CENTRAL_LOG_DISTRIBUTION_ROLE_ARN: !Ref CentralLogDistributionRoleArn
          EXECUTION_MODE: "lambda"
      Timeout: 300
      MemorySize: 512
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-log-distributor'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: StackType
          Value: lambda-functions

  # Event Source Mapping for SQS to Lambda
  LogDeliveryEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref SQSQueueArn
      FunctionName: !Ref LogDistributorFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5
      FunctionResponseTypes:
        - ReportBatchItemFailures


Outputs:
  LogDistributorFunctionName:
    Description: Name of the log distributor Lambda function
    Value: !Ref LogDistributorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LogDistributorFunctionName'

  LogDistributorFunctionArn:
    Description: ARN of the log distributor Lambda function
    Value: !GetAtt LogDistributorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDistributorFunctionArn'